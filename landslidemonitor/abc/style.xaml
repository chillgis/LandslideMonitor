<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:abc">

    <Style x:Key="CloseButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="image/close_hover.png" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsDefaulted" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="image/close_hover.png" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="image/close_pressed.png" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  
        ToogleButton的模板，  
        因为要进和状态切换，故要用到ToggleButton控件  
        -->
    <ControlTemplate x:Key="ToggleButtonTemp" TargetType="{x:Type ToggleButton}">
        <Border x:Name="bd"
                BorderThickness="1"
                CornerRadius="1,1,1,1">
            <Border.Background>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="LightGray" Offset="0" />
                    <GradientStop Color="White" Offset="1" />
                </LinearGradientBrush>
            </Border.Background>
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="Black" Offset="0" />
                    <GradientStop Color="Gray" Offset="1" />
                </LinearGradientBrush>
            </Border.BorderBrush>
            <Path Margin="2,2,2,2" Fill="Black" x:Name="p"
                  Data="M 0,0 L 4,5 L8,0 Z"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bd" Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="LightGreen" Offset="0" />
                            <GradientStop Color="White" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="p" Property="Data"
                        Value="M0,5 L8,5 L4,0 Z" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter TargetName="bd" Property="BorderBrush" Value="Gray" />
                <Setter TargetName="p" Property="Fill" Value="Gray" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 
            Expnder的样式 
        -->
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition x:Name="gr" Height="0" />
                        </Grid.RowDefinitions>
                        <BulletDecorator Background="CornflowerBlue" Height="30" Grid.Row="0"
                                         VerticalAlignment="Center" Margin="0,2,0,0">
                            <BulletDecorator.Bullet>
                                <ToggleButton Margin="1,3,1,1" Height="25" Width="25"
                                              Template="{StaticResource ToggleButtonTemp}"
                                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True" />
                            </BulletDecorator.Bullet>
                            <ContentPresenter HorizontalAlignment="Center" Margin="1,4,1,1" ContentSource="Header" />
                        </BulletDecorator>
                        <Border x:Name="scv" Background="AliceBlue" BorderThickness="1" BorderBrush="Black"
                                Grid.Row="1">
                            <ContentPresenter Margin="0" ContentSource="Content" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="gr" Property="Height"
                                    Value="{Binding Path=DesiredSize/Height,ElementName=scv}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="Button6" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="myBorder" BorderBrush="SkyBlue" BorderThickness="1" CornerRadius="1"
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center"
                                   HorizontalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderThickness" TargetName="myBorder" Value="1" />
                        </Trigger>
                        <DataTrigger Binding="{Binding  RelativeSource={RelativeSource Self},Path=Text}" Value="a">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Name="borderChangeStoryboard">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="myBorder"
                                            From="Red" To="Pink" AutoReverse="True" RepeatBehavior="Forever" />
                                        <ThicknessAnimation Storyboard.TargetProperty="(Border.BorderThickness)"
                                                            Storyboard.TargetName="myBorder" From="1,1,1,1"
                                                            To="20,15,50,15" AutoReverse="True"
                                                            RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="borderChangStoryboard" />
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button7" TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=MonitorNumber}" Value="55">
                <Setter Property="Content" Value="Red"></Setter>
<!---->
<!--                <DataTrigger.EnterActions>-->
<!--                    <BeginStoryboard Name="borderChangStoryboard">-->
<!--                        <Storyboard>-->
<!--                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" From="Red" To="Pink" AutoReverse="True" RepeatBehavior="Forever"></ColorAnimation>-->
<!--                        </Storyboard>-->
<!--                    </BeginStoryboard>-->
<!--                </DataTrigger.EnterActions>-->
<!--                <DataTrigger.ExitActions>-->
<!--                    <StopStoryboard BeginStoryboardName="borderChangStoryboard"></StopStoryboard>-->
<!--                </DataTrigger.ExitActions>-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGrid" TargetType="DataGrid">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="BorderBrush" Value="#FF377FED" />
    </Style>

    <!--行样式触发-->
    <!--背景色改变必须先设置cellStyle 因为cellStyle会覆盖rowStyle样式-->
    <Style TargetType="DataGridRow">
        <Setter Property="Background" Value="Blue" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0">
                <Setter Property="Background" Value="#e7e7e7" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="WhiteSmoke" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray" />
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridColumnHeader" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="#FF377FED" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Height" Value="30"></Setter>
            <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="TextBlockstyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="TransparentButtonStyle" TargetType="Button">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>